/*
 * Copyright 2017-2020 JetBrains s.r.o. Use of this source code is governed by the Apache 2.0 license.
 */

package kotlinx.serialization

import kotlinx.serialization.modules.*
import kotlin.reflect.*

/**
 * Descriptor that allows retrieving additional runtime information, if proper [SerialModule] is provided.
 *
 * Usually, descriptors are generated by compiler plugin and know all information statically.
 * However, that is not the case for [UnionKind.CONTEXTUAL] and [PolymorphicKind.OPEN] kinds of descriptors,
 * where actual serializer used for property can be determined only at runtime.
 * This descriptor is used by serializers which represent contextual serialization and open polymorphism (namely,
 * [ContextSerializer] and [PolymorphicSerializer]), so they can capture statically known [kClass] in this descriptor.
 * For schema introspection purposes, this [kClass] can be used in [SerialModule] to retrieve actual descriptor in runtime.
 *
 * This descriptor must always has either [UnionKind.CONTEXTUAL] or [PolymorphicKind.OPEN] kind,
 * and vice versa: if some [SerialDescriptor.kind] is either CONTEXTUAL or OPEN, that descriptor
 * could be safely casted to [ContextAwareDescriptor].
 *
 * ### Example
 * Imagine we need to find all distinct properties names, which may occur in output after serializing a given class
 * with respect to [`@ContextualSerialization`][ContextualSerialization] annotation and all possible inheritors when the class is
 * serialized polymorphically.
 * Then we can write following function:
 * ```
 * fun allDistinctNames(descriptor: SerialDescriptor, module: SerialModule) = when (descriptor.kind) {
 *   is PolymorphicKind.OPEN -> module.getPolymorphicDescriptors(descriptor as ContextAwareDescriptor)
 *     .map { it.elementNames() }.flatten().toSet()
 *   is UnionKind.CONTEXTUAL -> module.getContextualDescriptor(descriptor as ContextAwareDescriptor)
 *     ?.elementNames().orEmpty().toSet()
 *   else -> descriptor.elementNames().toSet()
 * }
 * ```
 *
 * @see SerialModule.getContextualDescriptor
 * @see SerialModule.getPolymorphicDescriptors
 */
public interface ContextAwareDescriptor : SerialDescriptor {
    /**
     * A class that should be used in [SerialModule] as a key.
     *
     * The same class that was known statically while generating a serializer.
     */
    public val kClass: KClass<*>
}

internal fun SerialDescriptor.withContext(context: KClass<*>): ContextAwareDescriptor =
    ContextAwareDescriptorImpl(this, context)

private class ContextAwareDescriptorImpl(
    val original: SerialDescriptor,
    override val kClass: KClass<*>
) : SerialDescriptor by original, ContextAwareDescriptor {
    override val serialName = "${original.serialName}<${kClass.simpleName()}>"

    override fun equals(other: Any?): Boolean {
        val another = other as? ContextAwareDescriptor ?: return false
        return serialName == another.serialName && another.kClass == this.kClass // .elementDescriptors is empty anyway
    }

    override fun hashCode(): Int {
        var result = kClass.hashCode()
        result = 31 * result + serialName.hashCode()
        return result
    }
}
